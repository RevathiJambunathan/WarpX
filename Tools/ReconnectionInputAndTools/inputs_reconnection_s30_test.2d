#################################
########### CONSTANTS ###########
#################################
my_constants.nde = 2.82395872706189E+017
my_constants.nbe = 5.64791745412378E+016
my_constants.delta = 0.05
my_constants.B0 = 0.4175177341
my_constants.xcs = 4.48
my_constants.B_prefactor = 2 * B0 / (pi/2 + nde/nbe -1)
my_constants.sigma = B0 * B0 / (mu0 * nbe * m_e * clight * clight)
my_constants.lambda_e = clight / q_e * (m_e * epsilon0 / nde) ** 0.5
my_constants.eta = 200 # theta_b = sigma / eta
my_constants.ds = 8 # half-width of initial downstream region, in units of delta
#################################
####### GENERAL PARAMETERS ######
#################################
max_step = 10
amr.n_cell = 256 128 # nboxes : 56 * 27 = 1512 (check with 42 nodes=252 (6boxes/gpu))
amr.max_grid_size_x = 128
amr.max_grid_size_y = 128
amr.blocking_factor = 32
amr.max_level = 0
geometry.dims = 2
boundary.field_lo = periodic periodic
boundary.field_hi = periodic periodic
geometry.prob_lo     = -8.96   -4.32
geometry.prob_hi     =  8.96    4.32
#################################
############ NUMERICS ###########
#################################
warpx.serialize_initial_conditions = 1
warpx.verbose = 1
warpx.cfl = 0.95
#amr.restart = diags/check10000
algo.particle_shape = 3
algo.load_balance_intervals = 100
algo.load_balance_with_sfc = 1
algo.load_balance_costs_update = Heuristic
algo.load_balance_efficiency_ratio_threshold = 1.01
algo.load_balance_knapsack_factor = 2.0
algo.maxwell_solver = yee
algo.current_deposition = esirkepov
algo.field_gathering = energy-conserving
warpx.use_filter = 1
amrex.the_arena_is_managed = 1
#################################
########## DIAGNOSTICS ##########
#################################
diagnostics.diags_names = diags chk
diags.intervals = 5
diags.diag_type = Full
diags.fields_to_plot = Ex Ey Ez Bx By Bz jx jy jz rho_electrons divB divE
diags.ions.plot_filter_function(t,x,y,z,ux,uy,uz,upstream,track) = track
diags.electrons.plot_filter_function(t,x,y,z,ux,uy,uz,upstream,track) = track

diags.particle_fields_to_plot = ux ux_upstream uy uy_upstream uz uz_upstream uxsq uxsq_upstream uysq uysq_upstream uzsq uzsq_upstream energy energy_upstream upstream
diags.particle_fields.ux(x,y,z,ux,uy,uz,upstream) = ux / sqrt(1 + ux * ux + uy * uy + uz * uz)

diags.particle_fields.ux_upstream(x,y,z,ux,uy,uz,upstream) = ux / sqrt(1 + ux * ux + uy * uy + uz * uz)
diags.particle_fields.ux_upstream.filter(x,y,z,ux,uy,uz,upstream) = upstream

diags.particle_fields.uy(x,y,z,ux,uy,uz,upstream) = uy / sqrt(1 + ux * ux + uy * uy + uz * uz)

diags.particle_fields.uy_upstream(x,y,z,ux,uy,uz,upstream) = uy / sqrt(1 + ux * ux + uy * uy + uz * uz)
diags.particle_fields.uy_upstream.filter(x,y,z,ux,uy,uz,upstream) = upstream

diags.particle_fields.uz(x,y,z,ux,uy,uz,upstream) = uz / sqrt(1 + ux * ux + uy * uy + uz * uz)

diags.particle_fields.uz_upstream(x,y,z,ux,uy,uz,upstream) = uz / sqrt(1 + ux * ux + uy * uy + uz * uz)
diags.particle_fields.uz_upstream.filter(x,y,z,ux,uy,uz,upstream) = upstream

diags.particle_fields.uxsq(x,y,z,ux,uy,uz,upstream) = ux * ux / (1 + ux * ux + uy * uy + uz * uz)

diags.particle_fields.uxsq_upstream(x,y,z,ux,uy,uz,upstream) = ux * ux / (1 + ux * ux + uy * uy + uz * uz)
diags.particle_fields.uxsq_upstream.filter(x,y,z,ux,uy,uz,upstream) = upstream

diags.particle_fields.uysq(x,y,z,ux,uy,uz,upstream) = uy * uy / (1 + ux * ux + uy * uy + uz * uz)

diags.particle_fields.uysq_upstream(x,y,z,ux,uy,uz,upstream) = uy * uy / (1 + ux * ux + uy * uy + uz * uz)
diags.particle_fields.uysq_upstream.filter(x,y,z,ux,uy,uz,upstream) = upstream

diags.particle_fields.uzsq(x,y,z,ux,uy,uz,upstream) = uz * uz / (1 + ux * ux + uy * uy + uz * uz)

diags.particle_fields.uzsq_upstream(x,y,z,ux,uy,uz,upstream) = uz * uz / (1 + ux * ux + uy * uy + uz * uz)
diags.particle_fields.uzsq_upstream.filter(x,y,z,ux,uy,uz,upstream) = upstream

diags.particle_fields.energy(x,y,z,ux,uy,uz,upstream) = sqrt(1 + ux * ux + uy * uy + uz * uz)

diags.particle_fields.energy_upstream(x,y,z,ux,uy,uz,upstream) = sqrt(1 + ux * ux + uy * uy + uz * uz)
diags.particle_fields.energy_upstream.filter(x,y,z,ux,uy,uz,upstream) = upstream

diags.particle_fields.upstream(x,y,z,ux,uy,uz,upstream) = upstream
diags.particle_fields_species = ions electrons

chk.format = checkpoint
chk.intervals = 5
chk.diag_type = Full

electrons.addRealAttributes = upstream track
electrons.attribute.upstream(x,y,z,ux,uy,uz,t) = 1 - heaviside((x-xcs) + delta * ds,0) * heaviside(-(x-xcs)+delta * ds,0) - heaviside(-(x+xcs)+delta*ds,0)*heaviside(x+xcs+delta * ds,0)
electrons.attribute.track(x,y,z,ux,uy,uz,t) = heaviside((x-xcs-0.5),0) * heaviside(-(x-xcs-0.5)+delta/200,0) + heaviside((x-xcs-1),0) * heaviside(-(x-xcs-1)+delta/200,0) + heaviside((x-xcs-1.5),0) * heaviside(-(x-xcs-1.5)+delta/200,0) + heaviside((x-xcs+0.5),0) * heaviside(-(x-xcs+0.5)+delta/200,0) + heaviside((x-xcs+1.0),0) * heaviside(-(x-xcs+1.0)+delta/200,0) + heaviside((x-xcs+1.5),0) * heaviside(-(x-xcs+1.5)+delta/200,0)
ions.addRealAttributes = upstream track
ions.attribute.upstream(x,y,z,ux,uy,uz,t) = 1 - heaviside((x-xcs) + delta * ds,0) * heaviside(-(x-xcs)+delta * ds,0) - heaviside(-(x+xcs)+delta*ds,0)*heaviside(x+xcs+delta * ds,0)
ions.attribute.track(x,y,z,ux,uy,uz,t) = heaviside((x-xcs-0.5),0) * heaviside(-(x-xcs-0.5)+delta/200,0) + heaviside((x-xcs-1),0) * heaviside(-(x-xcs-1)+delta/200,0) + heaviside((x-xcs-1.5),0) * heaviside(-(x-xcs-1.5)+delta/200,0) + heaviside((x-xcs+0.5),0) * heaviside(-(x-xcs+0.5)+delta/200,0) + heaviside((x-xcs+1.0),0) * heaviside(-(x-xcs+1.0)+delta/200,0) + heaviside((x-xcs+1.5),0) * heaviside(-(x-xcs+1.5)+delta/200,0)


warpx.reduced_diags_names = LBCost LBEfficiency PEnergy PMomentum EMEnergy EMMomentum LogEnergyHE LogEnergyHI EnergyHE EnergyHI Bsq LogEnergyHEus LogEnergyHIus
LBCost.type = LoadBalanceCosts
LBCost.intervals = 20
LBEfficiency.type = LoadBalanceEfficiency
LBEfficiency.intervals = 20
PEnergy.type = ParticleEnergy
PEnergy.intervals = 20
EMEnergy.type = FieldEnergy
EMEnergy.intervals = 20
PMomentum.type = ParticleMomentum
PMomentum.intervals = 20
EMMomentum.type = FieldMomentum
EMMomentum.intervals = 20

LogEnergyHEus.type = ParticleHistogram
LogEnergyHEus.species = "electrons"
LogEnergyHEus.intervals = 20
LogEnergyHEus.histogram_function(t,x,y,z,ux,uy,uz,upstream) = "log10(sqrt(1.0+(ux*ux + uy*uy + uz*uz)))"
LogEnergyHEus.filter_function(t,x,y,z,ux,uy,uz,upstream) = "upstream"
LogEnergyHEus.bin_number = 100
LogEnergyHEus.bin_min = 0
LogEnergyHEus.bin_max = 3

LogEnergyHIus.type = ParticleHistogram
LogEnergyHIus.species = "electrons"
LogEnergyHIus.intervals = 20
LogEnergyHIus.histogram_function(t,x,y,z,ux,uy,uz,upstream) = "log10(sqrt(1.0+(ux*ux + uy*uy + uz*uz)))"
LogEnergyHIus.filter_function(t,x,y,z,ux,uy,uz,upstream) = "upstream"
LogEnergyHIus.bin_number = 100
LogEnergyHIus.bin_min = 0
LogEnergyHIus.bin_max = 3

LogEnergyHE.type = ParticleHistogram
LogEnergyHE.species = "electrons"
LogEnergyHE.intervals = 20
LogEnergyHE.histogram_function(t,x,y,z,ux,uy,uz,upstream) = "log10(sqrt(1.0+(ux*ux + uy*uy + uz*uz)))"
LogEnergyHE.bin_number = 100
LogEnergyHE.bin_min = 0
LogEnergyHE.bin_max = 3

LogEnergyHI.type = ParticleHistogram
LogEnergyHI.species = "ions"
LogEnergyHI.intervals = 20
LogEnergyHI.histogram_function(t,x,y,z,ux,uy,uz,upstream) = "log10(sqrt(1.0+(ux*ux + uy*uy + uz*uz)))"
LogEnergyHI.bin_number = 100
LogEnergyHI.bin_min = 0
LogEnergyHI.bin_max = 3

EnergyHE.type = ParticleHistogram
EnergyHE.species = "electrons"
EnergyHE.intervals = 20
EnergyHE.histogram_function(t,x,y,z,ux,uy,uz,upstream) = "sqrt(1.0+(ux*ux + uy*uy + uz*uz))"
EnergyHE.bin_number = 50
EnergyHE.bin_min = 1
EnergyHE.bin_max = 2

EnergyHI.type = ParticleHistogram
EnergyHI.species = "ions"
EnergyHI.intervals = 20
EnergyHI.histogram_function(t,x,y,z,ux,uy,uz,upstream) = "sqrt(1.0+(ux*ux + uy*uy + uz*uz))"
EnergyHI.bin_number = 50
EnergyHI.bin_min = 1
EnergyHI.bin_max = 2

Bsq.type = FieldReduction
Bsq.reduced_function(x,y,z,Ex,Ey,Ez,Bx,By,Bz) = Bx*Bx + By*By + Bz*Bz
Bsq.reduction_type = Integral
Bsq.intervals = 20

#################################
############ FIELD ##############
#################################
warpx.B_ext_grid_init_style="parse_B_ext_grid_function"
warpx.Bx_external_grid_function(x,y,z) = "0"
warpx.By_external_grid_function(x,y,z) = "0"
warpx.Bz_external_grid_function(x,y,z) = "-1* B0 * 2. / (pi/2. + 5. - 1.) * (atan(tanh((x+xcs)/2./delta)) - atan(tanh((x-xcs)/2./delta)) - pi/4. + 1./2. * (5. - 1.) * (tanh((x+xcs)/delta) - tanh((x-xcs)/delta) - 1.) )"
warpx.IncludeBfieldPerturbation = 1
warpx.xcs = 4.48
warpx.B0 = 0.4175177341
warpx.nd_ratio = 5. #nde / nbe + 0.
warpx.delta = 0.05 #delta + 0.
warpx.magnitude = 0.01
warpx.power_x = 2
warpx.power_z = 51
#################################
############ PLASMA #############
#################################
particles.species_names = electrons ions
electrons.charge = -q_e
electrons.mass = m_e
electrons.injection_style = "NUniformPerCell"
electrons.num_particles_per_cell_each_dim = 8 8
electrons.profile = parse_density_function
electrons.density_function(x,y,z) = "nbe* (1+(nde/nbe - 1) * (1/cosh((x+xcs)/delta) + 1/cosh((x-xcs)/delta)))"
electrons.momentum_distribution_type = maxwell_juttner
electrons.theta_distribution_type = "parser"
electrons.theta_function(x,y,z) = "sigma / 4 * ((4+eta)/(eta) - (B_prefactor / B0 * (atan(tanh((x-xcs)/(2 * delta))) - atan(tanh((x+xcs)/(2 * delta))) + pi/4 + 0.5 * (nde/nbe - 1) * (tanh((x-xcs)/delta) - tanh((x+xcs)/delta) + 1))) ** 2) / ((1+(nde/nbe - 1) * (1/cosh((x+xcs)/delta) + 1/cosh((x-xcs)/delta))) * (1 - (lambda_e * sigma ** 0.5 / (2 * delta * (pi/2 + nde/nbe - 1)) * (nde/nbe) ** 0.5 * (1/cosh((x+xcs)/delta) - 1/cosh((x-xcs)/delta)))**2) ** 0.5)"
electrons.beta_distribution_type = "parser"
electrons.beta_function(x,y,z) = "lambda_e * sigma ** 0.5 / (2 * delta * (pi/2 + nde/nbe - 1)) * (nde/nbe) ** 0.5 * (1/cosh((x+xcs)/delta) - 1/cosh((x-xcs)/delta))"
electrons.bulk_vel_dir = -y

ions.charge = q_e
ions.mass = m_e
ions.injection_style = "NUniformPerCell"
ions.num_particles_per_cell_each_dim = 8 8
ions.profile = parse_density_function
ions.density_function(x,y,z) = "nbi + (ndi-nbi) * (cosh((x + xcs)/delta)**-1 + cosh((x - xcs)/delta)**-1)"
ions.theta_distribution_type = "parser"
ions.theta_function(x,y,z) = "sigma / 4 * ((4+eta)/(eta) - (B_prefactor / B0 * (atan(tanh((x-xcs)/(2 * delta))) - atan(tanh((x+xcs)/(2 * delta))) + pi/4 + 0.5 * (nde/nbe - 1) * (tanh((x-xcs)/delta) - tanh((x+xcs)/delta) + 1))) ** 2) / ((1+(nde/nbe - 1) * (1/cosh((x+xcs)/delta) + 1/cosh((x-xcs)/delta))) * (1 - (lambda_e * sigma ** 0.5 / (2 * delta * (pi/2 + nde/nbe - 1)) * (nde/nbe) ** 0.5 * (1/cosh((x+xcs)/delta) - 1/cosh((x-xcs)/delta)))**2) ** 0.5)"
ions.density_function(x,y,z) = "nbe * (1+(nde/nbe - 1) * (1/cosh((x+xcs)/delta) + 1/cosh((x-xcs)/delta)))"
ions.beta_distribution_type = "parser"
ions.beta_function(x,y,z) = "lambda_e * sigma ** 0.5 / (2 * delta * (pi/2 + nde/nbe - 1)) * (nde/nbe) ** 0.5 * (1/cosh((x+xcs)/delta) - 1/cosh((x-xcs)/delta))"
ions.momentum_distribution_type = maxwell_juttner
ions.bulk_vel_dir = y
